created: 20230105191433336
modified: 20230111122512886
tags: 
title: Extra Filter: searchsort
type: text/vnd.tiddlywiki

\define print-result()
	<$let output={{{ [<currentTiddler>search-replace:gi:regexp<query-regexp>,[''$1'']] }}}> <<output>> </$let>
	<$list filter="[<currentTiddler>has[text]]">-- <$link to=<<currentTiddler>>>Link</$link></$list>
\end

''Sort search results in an intelligent way'' which prioritises matches that occur earlier and are fuller over later and partial ones. Full rules are listed below.

!! Structure:

```
searchsort:field[query]
```

* ''Input:'' A selection of titles.
* ''Suffix:'' `field` is the name of the field by which to filter. Defaults to `title`. If the input is not valid tiddler names `title` is the only option that will provide any meaningful sorting; otherwise any field name can be used.
* ''Parameter:'' `query` is the search query which will be used for matching and sorting.
* ''Output:'' Sorted input.

----

!! Live example

{{susearch live example}}

----

!! Sorting rules

The sorting mechanism is governed by scoring system that attempts to feel natural. Early and exact matches are preferred over partial and later matches. Ultimately the exact rules shouldn't matter and the sort should feel natural.

!!! Main rules:

* Exact matches of `query`
** Break ties by sub-matching priority (see below)
** Break ties by more occurrences of the searched query
** Break ties by earlier occurrence of the searched query
* More words from the query matched
** Break ties by sub-matching priority of each word
** Break ties by more occurrences of each word
* Sort alphabetically like <code>[[sortan|https://tiddlywiki.com/#sortan%20Operator]]</code> does, ignoring letter case
* Finally sort alphabetically like `sortan` does in a case-sensitive manner

!!! Sub-matching priority:

* Full-word matches at the start - //''This'' is test sentence//
* Word-start matches at the start - //''Th''is is test sentence//
* Full-word matches in the middle - //This is ''test'' sentence//
* Word-start matches in the middle - //This is ''te''st sentence//
* Mid-word matches in the middle - //This is test se''nten''ce//

!!! Caveats:

* In all cases except the last step in main-rules matching is case-insensitive.
* When matching words all special characters except underscore (`_`) and hyphen (`-`) are stripped.