created: 20230111103747452
modified: 20230121224607309
title: Susearch Live Example
type: text/vnd.tiddlywiki

! Live example

Play around with the options below to enable/disable various features. ''Current filter'' below always shows the filter that is used for generating the list of results. You may notice that changing ''Do marking'' does not affect it -- that's because we need to do marking only once we print the results. More detailed explanation is at the bottom of this tiddler.

<$let
	lb="["
	rb="]"
>

	<$checkbox tiddler="$:/temp/SusearchLiveExample" field="do-search" checked="1">Do search</$checkbox>
	<$checkbox tiddler="$:/temp/SusearchLiveExample" field="do-sort" checked="1">Do sort</$checkbox>
	<$checkbox tiddler="$:/temp/SusearchLiveExample" field="do-marking" checked="1" unchecked="0">Do marking</$checkbox>

	<$select tiddler="$:/temp/SusearchLiveExample" field="source" default="[Data/Susearch-ducks]get[text]splitregexp[\r?\n]">
		<option value="[Data/Susearch-ducks]get[text]splitregexp[\r?\n]">Ducks</option>
		<option value="[Data/Susearch-idioms]get[text]splitregexp[\r?\n]">Idioms</option>
		<option value="all[tiddlers]!prefix[$:/]!is[draft]">All Tiddlers</option>
		<option value="all[tiddlers+shadows]!prefix[$:/temp/]!is[draft]">All + Shadow Tiddlers</option>
		<option value="all[tiddlers+shadows]tags[]">Tags</option>
	</$select>
	<$select tiddler="$:/temp/SusearchLiveExample" field="field-name" default="title">
		<option value="title">Search in title</option>
		<option value="text">Search in text</option>
	</$select>
	<$edit-text tiddler="$:/temp/SusearchLiveExample" tag="input" field="query" default="" placeholder="Search query"/>

    <$let
		default-source="[Data/Susearch-ducks]get[text]splitregexp[\r?\n]"
		query={{{ [{$:/temp/SusearchLiveExample!!query}else[]] }}}
		source={{{ [{$:/temp/SusearchLiveExample!!source}else<default-source>] }}}
		field={{{ [{$:/temp/SusearchLiveExample!!field-name}else[title]] }}}
		search-base={{{ [[susearch:]addsuffix<field>addsuffix[:raw-strip]addsuffix[<query>]] }}}
		search={{{ [{$:/temp/SusearchLiveExample!!do-search}match[1]then<search-base>] }}}
		sort-base={{{ [[susearch-sort:]addsuffix<field>addsuffix[:raw-strip]addsuffix[<query>]] }}}
		sort={{{ [{$:/temp/SusearchLiveExample!!do-sort}match[1]then<sort-base>] }}}
		limit="limit[20]"
		filter={{{ [<source>addsuffix<search>addsuffix<sort>addsuffix<limit>addprefix<lb>addsuffix<rb>] }}}
		regexp-query={{{ [<query>escaperegexp[]search-replace:g[ ],[|]] }}}
	>

		//Idioms list has been taken from [[jbrew/idiomash on Github|https://github.com/jbrew/idiomash/blob/master/text/idioms.txt]]//

		''Current filter:'' <code><$text text=<<filter>>/></code>

		<ul>
		<$list filter=<<filter>> emptyMessage="""<li>//No results//</li>""">
		<li>
			<$list filter="[{$:/temp/SusearchLiveExample!!do-marking}match[1]]" emptyMessage="""<$text text=<<currentTiddler>>/>""" variable="_">
				<$transclude tiddler={{{ [<currentTiddler>susearch-mark<query>] }}} field="title" />
				<$list filter="[<field>match[text]]" variable="_">
					<blockquote><$transclude tiddler={{{
						[<currentTiddler>get[text]susearch-mark:raw-strip<query>focus-on:regexp<regexp-query>]
					}}} field="title" /></blockquote>
				</$list>
			</$list>
		</li>
		</$list>
		</ul>
	</$let>
</$let>

! Explanation

The live example above is split into two main parts:

* Using [[ListWidget|https://tiddlywiki.com/#ListWidget]] to search:
** First uses <code>[[susearch|Extra Filter: susearch]]</code> to filter the input tiddlers.
** Then uses <code>[[susearch-sort|Extra Filter: susearch-sort]]</code> to sort the results by relevance to the search query.
* Then each result is displayed:
** At this point the variable `<<currentTiddler>>` contains the result without any changing.
** `susearch-mark` is used on the result item to highlight matches. It is done via a [[Transclude Widget|https://tiddlywiki.com/#TranscludeWidget]].
** `focus-on` is used to remove excessive text leading to the first mark so that the first highlight is displayed with the context around it.

The WikiText used to display the text preview:

```
<$let
    regexp-query={{{ [<query>escaperegexp[]search-replace:g[ ],[|]] }}}
>
<$transclude 
    tiddler={{{ [<currentTiddler>get[text]susearch-mark:raw-strip<query>focus-on:regexp<regexp-query>] }}} 
    field="title" 
/>
</$let>
```