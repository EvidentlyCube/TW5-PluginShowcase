{"title":"$:/plugins/EvidentlyCube/AutoCloseTags","version":"0.0.5","core-version":">=5.2.0","description":"Automatically closes open HTML tag when you type '>'","author":"Maurycy Zarzycki","source":"https://github.com/EvidentlyCube/TW5-AutoCloseTags","plugin-type":"plugin","list":"readme license history","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/EvidentlyCube/AutoCloseTags/closer.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoCloseTags/closer.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/EvidentlyCube/AutoCloseTags/closer.js\\r\\ntype: application/javascript\\r\\nmodule-type: library\\r\\n\\\\*/\\r\\n\\r\\n(function () {\\r\\n\\r\\n    /*jslint node: true, browser: true */\\r\\n    /*global $tw: false */\\r\\n    \\\"use strict\\\";\\r\\n\\r\\n    var Closer = function (editWidget, areaNode) {\\r\\n        // Only hook for tiddler's body input\\r\\n        if (editWidget.attributes.field !== 'text') {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // About underlying Widget\\r\\n        this._areaNode = areaNode;\\r\\n        this._tryToComplete = false;\\r\\n\\r\\n        // Listen to the Keyboard\\r\\n        $tw.utils.addEventListeners(this._areaNode, [\\r\\n            { name: \\\"keydown\\\", handlerObject: this, handlerMethod: \\\"handleKeyDown\\\" },\\r\\n            { name: \\\"input\\\", handlerObject: this, handlerMethod: \\\"handleInput\\\" },\\r\\n        ]);\\r\\n    };\\r\\n\\r\\n    function isWhitespace(char) {\\r\\n        return char === ' ' || char === \\\"\\\\t\\\" || char === \\\"\\\\n\\\" || char === \\\"\\\\r\\\";\\r\\n    }\\r\\n\\r\\n    function isTripleQuote(text, curPos) {\\r\\n        if (curPos < 3) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        return text.charAt(curPos) === '\\\"'\\r\\n            && text.charAt(curPos - 1) === '\\\"'\\r\\n            && text.charAt(curPos - 2) === '\\\"';\\r\\n    }\\r\\n\\r\\n    Closer.prototype.handleKeyDown = function (event) {\\r\\n        this._tryToComplete = event.keyCode === '>'.charCodeAt(0) || event.key === '>';\\r\\n    }\\r\\n\\r\\n    Closer.prototype.handleInput = function (event) {\\r\\n        var curPos = this._areaNode.selectionStart;  // cursor position\\r\\n        var inputText = this._areaNode.value;   // text in the area\\r\\n\\r\\n        if (!this._tryToComplete) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this._tryToComplete = false;\\r\\n\\r\\n        var isFirstCharacter = true;\\r\\n        var wasLastWhitespace = false;\\r\\n        var braceDepth = 1;\\r\\n        var insideTripleQuote = false;\\r\\n        var insideSingleQuote = false;\\r\\n        var insideDoubleQuote = false;\\r\\n        var startedWithDoubleBrace = false;\\r\\n        for (var i = curPos - 2; i >= 0; i--) {\\r\\n            var char = inputText.charAt(i);\\r\\n\\r\\n            if (isWhitespace(char)) {\\r\\n                wasLastWhitespace = true;\\r\\n                // Skip whitespaces\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (insideTripleQuote && !isTripleQuote(inputText, i)) {\\r\\n                continue;\\r\\n            } else if (insideDoubleQuote && char !== '\\\"') {\\r\\n                continue;\\r\\n            } else if (insideSingleQuote && char !== \\\"'\\\") {\\r\\n                continue;\\r\\n            } else if (insideSingleQuote || insideDoubleQuote || insideTripleQuote) {\\r\\n                insideSingleQuote = false;\\r\\n                insideDoubleQuote = false;\\r\\n                insideTripleQuote = false;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (char === \\\"'\\\") {\\r\\n                insideSingleQuote = true;\\r\\n                continue;\\r\\n            } else if (char === '\\\"') {\\r\\n                if (isTripleQuote(inputText, i)) {\\r\\n                    insideTripleQuote = true;\\r\\n                    i -= 2;\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                insideDoubleQuote = true;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (char === '/' && isFirstCharacter) {\\r\\n                isFirstCharacter = false;\\r\\n                // Self-closed tag, skip\\r\\n                break;\\r\\n            } else if (char === '/' && i > 0 && inputText.charAt(i - 1) === '<') {\\r\\n                isFirstCharacter = false;\\r\\n                // Found some other tag that's being closed, which means we totally should not be closing right now\\r\\n                break;\\r\\n            } else if (isFirstCharacter && char === '>') {\\r\\n                startedWithDoubleBrace = true;\\r\\n            }\\r\\n\\r\\n            isFirstCharacter = false;\\r\\n\\r\\n            if (char === '>') {\\r\\n                braceDepth++;\\r\\n            } else if (char === '<') {\\r\\n                braceDepth--;\\r\\n            }\\r\\n\\r\\n            if (braceDepth === 0) {\\r\\n                var wordLength = inputText.slice(i + 1, curPos).search(/[^$a-zA-Z0-9_]+/);\\r\\n                var word = inputText.substr(i + 1, wordLength !== -1 ? wordLength : curPos - 1 - 1);\\r\\n                // Handle closing <<>> structure\\r\\n                if (i > 0 && inputText.charAt(i - 1) === '<') {\\r\\n                    break;\\r\\n                } else if (startedWithDoubleBrace && inputText.charAt(i + 1) === '<') {\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                var wordLowercase = word.toLowerCase();\\r\\n                // Do not trigger for empty tags\\r\\n                if (word.length === 0) {\\r\\n                    break;\\r\\n                // void elements don't need to be closed\\r\\n                } else if (wordLowercase === 'br' || wordLowercase === 'input' || wordLowercase === 'hr' || wordLowercase === 'img') {\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                var toInsert = '</' + word + '>';\\r\\n\\r\\n                this._areaNode.focus();\\r\\n                this._areaNode.selectionStart = curPos;\\r\\n                this._areaNode.selectionEnd = curPos;\\r\\n\\r\\n                this._areaNode.ownerDocument.execCommand('insertText', false, toInsert);\\r\\n                this._areaNode.selectionStart = this._areaNode.selectionEnd = curPos;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n    exports.Closer = Closer;\\r\\n\\r\\n})();\\r\\n\\r\\n\\r\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/EvidentlyCube/AutoCloseTags/history\":{\"title\":\"$:/plugins/EvidentlyCube/AutoCloseTags/history\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* ''0.1.0'' -- Refactored to require less code and be compatible with other plugins expanding editText widgets\\n* ''0.0.5'' -- First version of the plugin\\n\"},\"$:/plugins/EvidentlyCube/AutoCloseTags/license\":{\"title\":\"$:/plugins/EvidentlyCube/AutoCloseTags/license\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This plugin is licensed under the MIT license.\\n\\nCopyright 2021 Maurycy Zarzycki\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"},\"$:/plugins/EvidentlyCube/AutoCloseTags/readme\":{\"title\":\"$:/plugins/EvidentlyCube/AutoCloseTags/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Github|https://github.com/EvidentlyCube/TW5-AutoCloseTags]]\\n\\n----\\n\\nAutomatically close HTML tags as you type. ''Does not work with ~CodeMirror!''\\n\\n* Works with `<$widgets>`.\\r\\n* Does not trigger for `<<macroCalls>>`.\\r\\n* Does not trigger for `<self-closed/>` tags.\\r\\n* Does not trigger for empty `<>` tags.\"},\"$:/plugins/EvidentlyCube/AutoCloseTags/widget.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoCloseTags/widget.js\",\"text\":\"const { Closer } = require('./closer');\\n\\n/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AutoCloseTags/widget.js\\ntype: application/javascript\\nmodule-type: startup\\n\\n\\\\*/\\n(function () {\\n\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\texports.name = \\\"evidentlycube-autoclose\\\";\\n\\texports.platforms = [\\\"browser\\\"];\\n\\texports.before = [\\\"render\\\"];\\n\\texports.synchronous = true;\\n\\n\\texports.startup = function () {\\n\\t\\tconst editTextWidget = require('$:/core/modules/widgets/edit-text.js')['edit-text'];\\n\\n\\t\\tconst oldRender = editTextWidget.prototype.render;\\n\\n\\t\\teditTextWidget.prototype.render = function() {\\n\\t\\t\\tconst result = oldRender.apply(this, arguments);\\n\\n\\t\\t\\tthis.engine._closer = new Closer(this, this.engine.domNode);\\n\\n\\t\\t\\treturn result\\n\\t\\t};\\n\\t};\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"}}}"}