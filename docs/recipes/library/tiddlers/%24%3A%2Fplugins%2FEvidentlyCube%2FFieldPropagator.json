{"title":"$:/plugins/EvidentlyCube/FieldPropagator","version":"0.0.1","core-version":">=5.2.0","description":"Propagates a field value upwards through parent tiddlers","author":"Maurycy Zarzycki","source":"https://github.com/EvidentlyCube/TW5-FieldPropagator","plugin-type":"plugin","list":"readme license history","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/EvidentlyCube/FieldPropagator/history\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/history\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* ''0.0.1'' -- First version of the plugin\"},\"$:/plugins/EvidentlyCube/FieldPropagator/index.js\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/index.js\",\"text\":\"/*\\\\\\r\\ntitle: $:/plugins/EvidentlyCube/FieldPropagator/index.js\\r\\ntype: application/javascript\\r\\nmodule-type: indexer\\r\\n\\r\\n\\\\*/\\r\\n\\r\\n(function () {\\r\\n\\r\\n    /*jslint node: true, browser: true */\\r\\n    /*global modules: false */\\r\\n    \\\"use strict\\\";\\r\\n\\r\\n    var isRebuilding = false;\\r\\n\\r\\n    function PropagatorIndexer(wiki) {\\r\\n        this.wiki = wiki;\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.init = function () {\\r\\n        this.index = null;\\r\\n\\r\\n        this.childrenMap = new Map();\\r\\n        this.parents = null;\\r\\n        this.trackedFields = null;\\r\\n        this.queuedToRebuild = [];\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.rebuild = function () {\\r\\n        var self = this;\\r\\n        this.parents = $tw.wiki.getTiddlersWithTag(\\\"$:/tags/Propagator\\\");\\r\\n        this.trackedFields = [];\\r\\n        this.childrenMap.clear();\\r\\n\\r\\n        $tw.wiki.forEachTiddler(function (title, tiddler) {\\r\\n            if (tiddler.isDraft()) {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            var parent = tiddler.fields.parent;\\r\\n            if (parent) {\\r\\n                if (!self.childrenMap.has(parent)) {\\r\\n                    self.childrenMap.set(parent, new Set());\\r\\n                }\\r\\n                self.childrenMap.get(parent).add(tiddler.fields.title);\\r\\n            }\\r\\n        });\\r\\n\\r\\n        this.parents.forEach(function (title) {\\r\\n            var parent = $tw.wiki.getTiddler(title);\\r\\n            var baseField = parent.fields['propagator-base'];\\r\\n\\r\\n            if (baseField && self.trackedFields.indexOf(baseField) === -1) {\\r\\n                self.trackedFields.push(baseField);\\r\\n            }\\r\\n        });\\r\\n\\r\\n        this.queuedToRebuild = this.parents.concat();\\r\\n        this.rebuildRoots();\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.update = function (updateDescriptor) {\\r\\n        if (isRebuilding) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Ignore shadow tiddlers and drafts\\r\\n        if (updateDescriptor.old.shadow || updateDescriptor.new.shadow) {\\r\\n            return;\\r\\n        } else if (\\r\\n            (updateDescriptor.old.tiddler && updateDescriptor.old.tiddler.isDraft())\\r\\n            || (updateDescriptor.new.tiddler && updateDescriptor.new.tiddler.isDraft())\\r\\n        ) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.removeFromIndex(updateDescriptor.old.tiddler);\\r\\n        this.addToIndex(updateDescriptor.new.tiddler);\\r\\n\\r\\n        if (updateDescriptor.old.exists !== updateDescriptor.new.exists) {\\r\\n            this.queueRoot(this.findRoot(updateDescriptor.old.tiddler));\\r\\n            this.queueRoot(this.findRoot(updateDescriptor.new.tiddler));\\r\\n        } else if (updateDescriptor.old.parent !== updateDescriptor.new.parent) {\\r\\n            this.queueRoot(this.findRoot(updateDescriptor.old.tiddler));\\r\\n            this.queueRoot(this.findRoot(updateDescriptor.new.tiddler));\\r\\n        } else {\\r\\n            const isChanged = this.trackedFields.find(function (field) {\\r\\n                return updateDescriptor.old.tiddler.fields[field] !== updateDescriptor.new.tiddler.fields[field];\\r\\n            });\\r\\n\\r\\n            if (isChanged) {\\r\\n                this.queueRoot(this.findRoot(updateDescriptor.new.tiddler));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.removeFromIndex = function (tiddler) {\\r\\n        if (!tiddler || !tiddler.fields.parent) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        var index = this.childrenMap.get(tiddler.fields.parent);\\r\\n        if (index) {\\r\\n            index.delete(tiddler.fields.title);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.addToIndex = function (tiddler) {\\r\\n        if (!tiddler || !tiddler.fields.parent) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        var index = this.childrenMap.get(tiddler.fields.parent);\\r\\n        if (!index) {\\r\\n            index = new Set();\\r\\n            this.childrenMap.set(tiddler.fields.parent, index);\\r\\n        }\\r\\n        index.add(tiddler.fields.title);\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.queueRoot = function (root) {\\r\\n        if (root && this.queuedToRebuild.indexOf(root.fields.title) === -1) {\\r\\n            if (this.queuedToRebuild.length === 0) {\\r\\n                setTimeout(this.rebuildRoots.bind(this), 1);\\r\\n            }\\r\\n\\r\\n            this.queuedToRebuild.push(root.fields.title);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.rebuildRoots = function () {\\r\\n        var self = this;\\r\\n        isRebuilding = true;\\r\\n\\r\\n        try {\\r\\n            this.queuedToRebuild.forEach(function (root) {\\r\\n                self.rebuildRoot($tw.wiki.getTiddler(root));\\r\\n            });\\r\\n        } finally {\\r\\n            isRebuilding = false;\\r\\n            this.queuedToRebuild.length = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.rebuildRoot = function (root) {\\r\\n        const baseField = root.fields[\\\"propagator-base\\\"];\\r\\n        const propagatedField = root.fields[\\\"propagator-propagated\\\"];\\r\\n        const preferredValue = root.fields[\\\"propagator-preferred-value\\\"];\\r\\n        const saveQueue = new Map();\\r\\n\\r\\n        if (baseField === 'title' || propagatedField === 'title') {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        var index = this.childrenMap.get(root.fields.title);\\r\\n        if (index) {\\r\\n            Array.from(index.values()).forEach(childTitle => this.updateChild($tw.wiki.getTiddler(childTitle), baseField, propagatedField, preferredValue, saveQueue));\\r\\n        }\\r\\n\\r\\n        Array.from(saveQueue.values()).forEach(tiddler => {\\r\\n            $tw.wiki.addTiddler(tiddler);\\r\\n        })\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.updateChild = function (tiddler, baseField, propagatedField, preferredValue, saveQueue) {\\r\\n        let targetValue = undefined;\\r\\n\\r\\n        var index = this.childrenMap.get(tiddler.fields.title);\\r\\n        if (index) {\\r\\n            Array.from(index.values()).forEach(childTitle => {\\r\\n                let result = this.updateChild($tw.wiki.getTiddler(childTitle), baseField, propagatedField, preferredValue, saveQueue);\\r\\n\\r\\n                if (targetValue === undefined) {\\r\\n                    targetValue = result;\\r\\n                } else if (result === preferredValue) {\\r\\n                    targetValue = result;\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n\\r\\n        // Update this tiddler's propagated field based on children's value\\r\\n        if (targetValue !== tiddler.fields[propagatedField]) {\\r\\n            console.log(`Updating ${tiddler.fields.title} setting to ${targetValue}`);\\r\\n            const update = {};\\r\\n            update[propagatedField] = targetValue;\\r\\n\\r\\n            const newTiddler = new $tw.Tiddler(saveQueue.get(tiddler.fields.title) || tiddler, update);\\r\\n            saveQueue.set(tiddler.fields.title, newTiddler);\\r\\n        }\\r\\n\\r\\n        // Get the current tiddler's base field's value and use it if there is no propagated value\\r\\n        // Or the current value is the preferred one (otherwise we'd only look at the ends of\\r\\n        // the tree for values, rather than whole branches\\r\\n        const baseValue = tiddler.fields[baseField];\\r\\n        if (targetValue === undefined || baseValue === preferredValue) {\\r\\n            return baseValue;\\r\\n        }\\r\\n\\r\\n        return targetValue;\\r\\n    }\\r\\n\\r\\n    PropagatorIndexer.prototype.findRoot = function (tiddler) {\\r\\n        if (tiddler && tiddler.isDraft()) {\\r\\n            return undefined;\\r\\n        }\\r\\n\\r\\n        while (tiddler) {\\r\\n            if (tiddler.hasTag('$:/tags/Propagator')) {\\r\\n                return tiddler;\\r\\n            }\\r\\n\\r\\n            tiddler = $tw.wiki.getTiddler(tiddler.fields.parent);\\r\\n        }\\r\\n\\r\\n        return undefined;\\r\\n    }\\r\\n\\r\\n    exports.PropagatorIndexer = PropagatorIndexer;\\r\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"indexer\"},\"$:/plugins/EvidentlyCube/FieldPropagator/license\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/license\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This plugin is licensed under the MIT license.\\n\\nCopyright 2021 Maurycy Zarzycki\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"},\"$:/plugins/EvidentlyCube/FieldPropagator/readme\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Github|https://github.com/EvidentlyCube/TW5-FieldPropagator]]\\n\\n----\\n\\nPropagates a value of children's field up through its parents. Primary use case was to allow marking tiddlers as public/private, and have the option to display in Table of Contents if a given parent tiddler has any public children.\"}}}"}