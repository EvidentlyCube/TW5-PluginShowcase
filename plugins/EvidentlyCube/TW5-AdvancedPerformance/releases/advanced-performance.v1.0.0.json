{"fields":{"title":"$:/plugins/EvidentlyCube/AdvancedPerformance","version":"1.0.0","core-version":">=5.2.3","description":"Additional functionalities to measure your TW's performance.","author":"Maurycy Zarzycki","source":"https://github.com/EvidentlyCube/TW5-AdvancedPerformance","plugin-type":"plugin","list":["readme","license","history"],"dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/EvidentlyCube/AdvancedPerformance/history\":{\"title\":\"$:/plugins/EvidentlyCube/AdvancedPerformance/history\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* ''1.0.0'' -- Initial release\\n* ''0.0.1'' -- Development version\"},\"$:/plugins/EvidentlyCube/AdvancedPerformance/license\":{\"title\":\"$:/plugins/EvidentlyCube/AdvancedPerformance/license\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This plugin is licensed under the MIT license.\\n\\nCopyright 2022 Maurycy Zarzycki\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"},\"$:/plugins/EvidentlyCube/AdvancedPerformance/readme\":{\"title\":\"$:/plugins/EvidentlyCube/AdvancedPerformance/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\n[[Github|https://github.com/EvidentlyCube/TW5-AdvancedPerformance]]\\n\\n----\\n\\n! Features\\n\\nExpand TiddlyWiki's performance instrumentation and make its results available directly in your wiki,\\nwithout having to use developer console of the browser.\\n\\n!! How to Use\\n\\n* Install the plugin\\n* Enable //Performance Instrumentation// (Control Panel -> Settings -> Performance Instrumentation)\\n* Save wiki\\n* Refresh the page\\n\\nThe bottom widget will now be available and advanced instrumentation will happen. The functionality of this plugin can be easily toggled off by disabling //Performance Instrumentation// and refreshing the page.\\n\"},\"$:/plugins/EvidentlyCube/AdvancedPerformance/perf.js\":{\"title\":\"$:/plugins/EvidentlyCube/AdvancedPerformance/perf.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AdvancedPerformance/perf.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nCleans up data after a TaskList is removed\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: false, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"evidentlycube-adv-perf--performance\\\";\\nexports.before = [\\\"startup\\\"];\\nexports.synchronous = true;\\nexports.startup = function() {\\n\\tif ($tw.node) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t$tw.Performance.prototype.showGreeting = function() {\\n\\t\\tthis.refreshTimes = {};\\n\\t\\tthis.refreshTimesHistory = [];\\n\\t};\\n\\n\\t$tw.Performance.prototype.log = function() {\\n\\t\\tconsole.log(\\\"Please use the UI instead\\\");\\n\\t};\\n\\n\\t$tw.Performance.prototype.report = function(name,fn) {\\n\\t\\tvar self = this;\\n\\t\\tif(this.enabled) {\\n\\t\\t\\treturn function() {\\n\\t\\t\\t\\tvar startTime = $tw.utils.timer(),\\n\\t\\t\\t\\t\\tresult = fn.apply(this,arguments),\\n\\t\\t\\t\\t\\ttimeTaken = $tw.utils.timer(startTime);\\n\\t\\t\\t\\tself.refreshTimes[name] = timeTaken;\\n\\t\\t\\t\\tself.logger.log(name + \\\": \\\" + timeTaken.toFixed(2) + \\\"ms\\\");\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t};\\n\\t\\t} else {\\n\\t\\t\\treturn fn;\\n\\t\\t}\\n\\t};\\n\\n\\t$tw.Performance.prototype.storeRefresh = function(log) {\\n\\t\\tthis.refreshTimesHistory.push(log);\\n\\n\\t\\tif (this.refreshTimesHistory.length > 100) {\\n\\t\\t\\tthis.refreshTimesHistory.shift();\\n\\t\\t}\\n\\t}\\n\\n\\t$tw.Performance.prototype.measure = function(name,fn) {\\n\\t\\tvar self = this;\\n\\t\\tif(this.enabled) {\\n\\t\\t\\treturn function() {\\n\\t\\t\\t\\tvar startTime = $tw.utils.timer(),\\n\\t\\t\\t\\t\\tresult = fn.apply(this,arguments),\\n\\t\\t\\t\\t\\ttakenTime = $tw.utils.timer(startTime);\\n\\t\\t\\t\\tif(!(name in self.measures)) {\\n\\t\\t\\t\\t\\tself.measures[name] = {\\n\\t\\t\\t\\t\\t\\tlastUse: 0,\\n\\t\\t\\t\\t\\t\\tlongestRun: 0,\\n\\t\\t\\t\\t\\t\\tshortestRun: Number.MAX_SAFE_INTEGER,\\n\\t\\t\\t\\t\\t\\ttotalCalls: 0,\\n\\t\\t\\t\\t\\t\\ttotalTime: 0,\\n\\t\\t\\t\\t\\t\\ttimes: []\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tself.measures[name].lastUse = Date.now();\\n\\t\\t\\t\\tself.measures[name].totalCalls++;\\n\\t\\t\\t\\tself.measures[name].longestRun = Math.max(takenTime, self.measures[name].longestRun);\\n\\t\\t\\t\\tself.measures[name].shortestRun = Math.min(takenTime, self.measures[name].shortestRun);\\n\\t\\t\\t\\tself.measures[name].totalTime += takenTime;\\n\\t\\t\\t\\tself.measures[name].times.push(takenTime);\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t};\\n\\t\\t} else {\\n\\t\\t\\treturn fn;\\n\\t\\t}\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/EvidentlyCube/AdvancedPerformance/ui.js\":{\"title\":\"$:/plugins/EvidentlyCube/AdvancedPerformance/ui.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AdvancedPerformance/ui.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nCleans up data after a TaskList is removed\\n\\\\*/\\n\\n(function () {\\n\\n\\t/*jslint node: false, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\t// Export name and synchronous status\\n\\texports.name = \\\"evidentlycube-adv-perf--footer\\\";\\n\\texports.after = [\\\"startup\\\"];\\n\\texports.synchronous = true;\\n\\texports.startup = function () {\\n\\t\\tif ($tw.node) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar footerText = $tw.wiki.getTiddlerText('$:/config/Performance/Instrumentation') !== \\\"yes\\\"\\n\\t\\t\\t? \\\"Performance instrumentation has been enabled, please save your wiki and refresh it to allow collecting data\\\"\\n\\t\\t\\t: \\\"\\\";\\n\\t\\tvar isShowingDetails = false;\\n\\t\\tvar selectedTab = \\\"ec_ap-tab--refresh-logs\\\";\\n\\n\\t\\tvar onCloseClicked = function(event) {\\n\\t\\t\\tisShowingDetails = false;\\n\\t\\t\\tshowDetails();\\n\\t\\t};\\n\\n\\t\\tvar onTabClicked = function(event) {\\n\\t\\t\\tselectedTab = event.target.getAttribute('data-for') || selectedTab;\\n\\t\\t\\trefreshTabs();\\n\\t\\t}\\n\\n\\t\\tvar onShowDetailsClicked = function(event) {\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\tevent.preventDefault();\\n\\n\\t\\t\\tisShowingDetails = true;\\n\\t\\t\\tshowDetails();\\n\\t\\t};\\n\\n\\t\\tvar onClearPerfDataClicked = function(event) {\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\tevent.preventDefault();\\n\\n\\t\\t\\t$tw.perf.measures = {};\\n\\t\\t\\t$tw.perf.refreshTimes = {};\\n\\t\\t\\t$tw.perf.refreshTimesHistory = [];\\n\\n\\t\\t\\tfooterText = \\\"Performance data was cleared, please interact with the wiki to start collecting data\\\";\\n\\n\\t\\t\\tshowDetails();\\n\\t\\t\\trefreshFooter();\\n\\t\\t}\\n\\n\\t\\tvar refreshTabs = function() {\\n\\t\\t\\tdocument.querySelectorAll('.ec_ap-tab-header').forEach(function(element) {\\n\\t\\t\\t\\tif (element.getAttribute('data-for') === selectedTab) {\\n\\t\\t\\t\\t\\telement.classList.add('selected');\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\telement.classList.remove('selected');\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tdocument.querySelectorAll('#ec_ap-tabs > *').forEach(function(element) {\\n\\t\\t\\t\\tif (element.classList.contains(selectedTab)) {\\n\\t\\t\\t\\t\\telement.classList.add('selected');\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\telement.classList.remove('selected');\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t};\\n\\n\\t\\tvar showDetails = function() {\\n\\t\\t\\tif (!isShowingDetails) {\\n\\t\\t\\t\\tdocument.querySelector('#ec_ap-wrap').style.display = \\\"none\\\";\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tdocument.querySelector('#ec_ap-wrap').style.display = \\\"block\\\";\\n\\n\\t\\t\\trefreshTabs();\\n\\n\\t\\t\\tvar measures = [];\\n\\t\\t\\t$tw.utils.each($tw.perf.measures, function(measure, filterName) {\\n\\t\\t\\t\\tvar lastTen = measure.times.slice(-10);\\n\\t\\t\\t\\tvar timesSorted = measure.times.concat();\\n\\t\\t\\t\\ttimesSorted.sort();\\n\\n\\t\\t\\t\\tvar half = Math.floor(timesSorted.length / 2);\\n\\n\\t\\t\\t\\tmeasures.push({\\n\\t\\t\\t\\t\\tfilterName: filterName.replace(/^filter:\\\\s*/, ''),\\n\\t\\t\\t\\t\\tlastUse: measure.lastUse,\\n\\t\\t\\t\\t\\tlongestRun: measure.longestRun,\\n\\t\\t\\t\\t\\tshortestRun: measure.shortestRun,\\n\\t\\t\\t\\t\\ttotalCalls: measure.totalCalls,\\n\\t\\t\\t\\t\\ttotalTime: measure.totalTime,\\n\\t\\t\\t\\t\\ttotalTimeLastTen: lastTen.reduce(function(sum, next) { return sum + next; }, 0),\\n\\t\\t\\t\\t\\ttimes: measure.times,\\n\\t\\t\\t\\t\\ttimesSorted: timesSorted,\\n\\t\\t\\t\\t\\ttimesLastTen: lastTen,\\n\\t\\t\\t\\t\\taverage: measure.totalTime / measure.totalCalls,\\n\\t\\t\\t\\t\\tmedian: timesSorted.length % 2\\n\\t\\t\\t\\t\\t\\t? timesSorted[half]\\n\\t\\t\\t\\t\\t\\t: (timesSorted[half - 1] + timesSorted[half]) / 2\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\n\\t\\t\\tvar recordsToShow = 50;\\n\\t\\t\\tvar mostUsedFilters = measures.concat().sort(createSortByCallback(['totalCalls', 'lastUse']));\\n\\t\\t\\tvar singleLongestExecution = measures.concat().sort(createSortByCallback(['longestRun', 'lastUse']));\\n\\t\\t\\tvar totalLongestExecution = measures.concat().sort(createSortByCallback(['totalTime', 'lastUse']));\\n\\t\\t\\tvar averageLongest = measures.concat().sort(createSortByCallback(['average', 'lastUse']));\\n\\t\\t\\tvar medianLongest = measures.concat().sort(createSortByCallback(['median', 'lastUse']));\\n\\n\\t\\t\\tcreateTable(\\n\\t\\t\\t\\tdocument.querySelector('#ec_ap--last-refreshes'),\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t{name: 'Refresh time', field: 'time'},\\n\\t\\t\\t\\t\\t{name: 'Total time', getText: function(m) {\\n\\t\\t\\t\\t\\t\\treturn Object.values(m.refreshTimes).reduce(function(sum, next) { return sum + next}, 0).toFixed(2) + \\\"ms\\\";\\n\\t\\t\\t\\t\\t}},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: 'Individual times',\\n\\t\\t\\t\\t\\t\\tgetText: function(m) {\\n\\t\\t\\t\\t\\t\\t\\treturn Object.keys(m.refreshTimes).map(function(key) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn key + \\\": \\\" + m.refreshTimes[key].toFixed(2) + \\\"ms\\\";\\n\\t\\t\\t\\t\\t\\t\\t}).join(\\\"<br>\\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: 'Changed tiddlers',\\n\\t\\t\\t\\t\\t\\tgetText: function(m) {\\n\\t\\t\\t\\t\\t\\t\\treturn m.changedTiddlerNames.length;\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\tgetTitle: function(m) {\\n\\t\\t\\t\\t\\t\\t\\treturn m.changedTiddlerNames.join(\\\"\\\\n\\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{name: \\\"Temp\\\", getText: function(m) { return m.tempTiddlers; }},\\n\\t\\t\\t\\t\\t{name: \\\"State\\\", getText: function(m) { return m.stateTiddlers; }},\\n\\t\\t\\t\\t\\t{name: \\\"System\\\", getText: function(m) { return m.systemTiddlers; }},\\n\\t\\t\\t\\t\\t{name: \\\"Main\\\", getText: function(m) { return m.mainTiddlers; }},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\t$tw.perf.refreshTimesHistory.slice(-recordsToShow).reverse()\\n\\t\\t\\t);\\n\\n\\t\\t\\tcreateTable(\\n\\t\\t\\t\\tdocument.querySelector('#ec_ap--most-used'),\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t{name: 'Filter', field: 'filterName'},\\n\\t\\t\\t\\t\\t{name: 'Uses', field: 'totalCalls' },\\n\\t\\t\\t\\t\\t{name: 'Total time', getText: function(m) { return m.totalTime.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: 'Total time (last 10)',\\n\\t\\t\\t\\t\\t\\tgetText: function(m) { return m.totalTimeLastTen.toFixed(2) + 'ms'; },\\n\\t\\t\\t\\t\\t\\tgetTitle: function(m) { return m.timesLastTen.map(function(x) { return x.toFixed(2) + 'ms'}).join(\\\"\\\\n\\\"); }\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{name: 'Longest run', getText: function(m) { return m.longestRun.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Average time', getText: function(m) { return m.average.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Median time', getText: function(m) { return m.median.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tmostUsedFilters.slice(0, recordsToShow)\\n\\t\\t\\t);\\n\\n\\t\\t\\tcreateTable(\\n\\t\\t\\t\\tdocument.querySelector('#ec_ap--single-longest'),\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t{name: 'Filter', field: 'filterName'},\\n\\t\\t\\t\\t\\t{name: 'Longest run', getText: function(m) { return m.longestRun.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Uses', field: 'totalCalls' },\\n\\t\\t\\t\\t\\t{name: 'Total time', getText: function(m) { return m.totalTime.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: 'Total time (last 10)',\\n\\t\\t\\t\\t\\t\\tgetText: function(m) { return m.totalTimeLastTen.toFixed(2) + 'ms'; },\\n\\t\\t\\t\\t\\t\\tgetTitle: function(m) { return m.timesLastTen.map(function(x) { return x.toFixed(2) + 'ms'}).join(\\\"\\\\n\\\"); }\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{name: 'Average time', getText: function(m) { return m.average.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Median time', getText: function(m) { return m.median.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tsingleLongestExecution.slice(0, recordsToShow)\\n\\t\\t\\t);\\n\\n\\t\\t\\tcreateTable(\\n\\t\\t\\t\\tdocument.querySelector('#ec_ap--total-longest'),\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t{name: 'Filter', field: 'filterName'},\\n\\t\\t\\t\\t\\t{name: 'Total time', getText: function(m) { return m.totalTime.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Uses', field: 'totalCalls' },\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: 'Total time (last 10)',\\n\\t\\t\\t\\t\\t\\tgetText: function(m) { return m.totalTimeLastTen.toFixed(2) + 'ms'; },\\n\\t\\t\\t\\t\\t\\tgetTitle: function(m) { return m.timesLastTen.map(function(x) { return x.toFixed(2) + 'ms'}).join(\\\"\\\\n\\\"); }\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{name: 'Longest run', getText: function(m) { return m.longestRun.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Average time', getText: function(m) { return m.average.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Median time', getText: function(m) { return m.median.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\ttotalLongestExecution.slice(0, recordsToShow)\\n\\t\\t\\t);\\n\\n\\t\\t\\tcreateTable(\\n\\t\\t\\t\\tdocument.querySelector('#ec_ap--average'),\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t{name: 'Filter', field: 'filterName'},\\n\\t\\t\\t\\t\\t{name: 'Average time', getText: function(m) { return m.average.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Uses', field: 'totalCalls' },\\n\\t\\t\\t\\t\\t{name: 'Total time', getText: function(m) { return m.totalTime.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: 'Total time (last 10)',\\n\\t\\t\\t\\t\\t\\tgetText: function(m) { return m.totalTimeLastTen.toFixed(2) + 'ms'; },\\n\\t\\t\\t\\t\\t\\tgetTitle: function(m) { return m.timesLastTen.map(function(x) { return x.toFixed(2) + 'ms'}).join(\\\"\\\\n\\\"); }\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{name: 'Longest run', getText: function(m) { return m.longestRun.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Median time', getText: function(m) { return m.median.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\taverageLongest.slice(0, recordsToShow)\\n\\t\\t\\t);\\n\\n\\t\\t\\tcreateTable(\\n\\t\\t\\t\\tdocument.querySelector('#ec_ap--median'),\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t{name: 'Filter', field: 'filterName'},\\n\\t\\t\\t\\t\\t{name: 'Median time', getText: function(m) { return m.median.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Uses', field: 'totalCalls' },\\n\\t\\t\\t\\t\\t{name: 'Total time', getText: function(m) { return m.totalTime.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tname: 'Total time (last 10)',\\n\\t\\t\\t\\t\\t\\tgetText: function(m) { return m.totalTimeLastTen.toFixed(2) + 'ms'; },\\n\\t\\t\\t\\t\\t\\tgetTitle: function(m) { return m.timesLastTen.map(function(x) { return x.toFixed(2) + 'ms'}).join(\\\"\\\\n\\\"); }\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{name: 'Longest run', getText: function(m) { return m.longestRun.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t\\t{name: 'Average time', getText: function(m) { return m.average.toFixed(2) + 'ms'; }},\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tmedianLongest.slice(0, recordsToShow)\\n\\t\\t\\t);\\n\\t\\t};\\n\\n\\t\\tvar createSortByCallback = function(fields, reverse) {\\n\\t\\t\\tvar orderMultiplier = reverse ? -1 : 1;\\n\\n\\t\\t\\treturn function(left, right) {\\n\\t\\t\\t\\tfor(var i = 0; i < fields.length; i++) {\\n\\t\\t\\t\\t\\tvar field = fields[i];\\n\\t\\t\\t\\t\\tif (left[field] !== right[field]) {\\n\\t\\t\\t\\t\\t\\treturn (right[field] - left[field]) * orderMultiplier;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn left.filterName.localeCompare(right.filterName) * orderMultiplier;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvar createTable = function(tableElement, headers, measures) {\\n\\t\\t\\tvar dm = $tw.utils.domMaker;\\n\\t\\t\\tvar theadThs = headers.map(function(header) {\\n\\t\\t\\t\\treturn dm('th', {text: header.name});\\n\\t\\t\\t});\\n\\t\\t\\tvar theadTr = dm(\\\"tr\\\", {children: theadThs});\\n\\t\\t\\tvar tbodyTrs = measures.map(function(measure) {\\n\\t\\t\\t\\tvar tds = headers.map(function(header) {\\n\\t\\t\\t\\t\\tvar content = dm('span', {\\n\\t\\t\\t\\t\\t\\tclass: header.getTitle ? 'ec_ap-annotated' : '',\\n\\t\\t\\t\\t\\t\\tinnerHTML: header.getText ? header.getText(measure) : measure[header.field],\\n\\t\\t\\t\\t\\t\\tattributes: {title: header.getTitle ? header.getTitle(measure) : ''}\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\treturn dm('td', {children: [content]});\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\treturn dm('tr', {children: tds});\\n\\t\\t\\t});\\n\\t\\t\\tvar thead = dm('thead', {children: [theadTr]});\\n\\t\\t\\tvar tbody = dm('tbody', {children: tbodyTrs});\\n\\t\\t\\tvar table = dm('table', {children: [thead, tbody]});\\n\\n\\t\\t\\ttableElement.innerHTML = table.innerHTML;\\n\\t\\t}\\n\\n\\t\\tvar refreshFooter = function() {\\n\\t\\t\\tvar hasMeasurements = Object.keys($tw.perf.measures).length > 0;\\n\\n\\t\\t\\tif (!hasMeasurements) {\\n\\t\\t\\t\\tdocument.querySelectorAll('#ec_ap-footer > *').forEach(function(element) {\\n\\t\\t\\t\\t\\telement.style.display = \\\"none\\\";\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tvar message = document.querySelector('#ec_ap-message')\\n\\t\\t\\t\\tmessage.style.display = \\\"block\\\";\\n\\t\\t\\t\\tmessage.innerText = footerText;\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tdocument.querySelectorAll('#ec_ap-footer > *').forEach(function(element) {\\n\\t\\t\\t\\telement.style.display = null;\\n\\t\\t\\t});\\n\\t\\t\\tdocument.querySelector('#ec_ap-message').style.display = \\\"none\\\";\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t$tw.wiki.addEventListener(\\\"change\\\", function (changes) {\\n\\t\\t\\tif (!document.querySelector('#ec_ap-footer') || refreshFooter()) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar tempTiddlers = 0;\\n\\t\\t\\tvar systemTiddlers = 0;\\n\\t\\t\\tvar stateTiddlers = 0;\\n\\t\\t\\tvar mainTiddlers = 0;\\n\\t\\t\\tvar totalTiddlers = 0;\\n\\t\\t\\tvar totalTime = 0;\\n\\t\\t\\tvar refreshTimes = JSON.parse(JSON.stringify($tw.perf.refreshTimes));\\n\\t\\t\\tvar refreshHtmls = [];\\n\\n\\t\\t\\t$tw.utils.each(changes, function(_, tiddler) {\\n\\t\\t\\t\\tif (tiddler.startsWith('$:/temp/')) {\\n\\t\\t\\t\\t\\ttempTiddlers++;\\n\\t\\t\\t\\t} else if (tiddler.startsWith('$:/state/')) {\\n\\t\\t\\t\\t\\tstateTiddlers++;\\n\\t\\t\\t\\t} else if (tiddler.startsWith('$:/')) {\\n\\t\\t\\t\\t\\tsystemTiddlers++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tmainTiddlers++;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttotalTiddlers++;\\n\\t\\t\\t});\\n\\n\\t\\t\\t$tw.utils.each($tw.perf.refreshTimes, function(time, name) {\\n\\t\\t\\t\\ttotalTime += time;\\n\\t\\t\\t\\trefreshHtmls.push(\\n\\t\\t\\t\\t\\t'<span title=\\\"'\\n\\t\\t\\t\\t\\t+ name +\\n\\t\\t\\t\\t\\t'\\\">'\\n\\t\\t\\t\\t\\t+ time.toFixed(2)\\n\\t\\t\\t\\t\\t+ 'ms</span>'\\n\\t\\t\\t\\t);\\n\\t\\t\\t});\\n\\n\\t\\t\\tvar now = new Date();\\n\\t\\t\\tvar time = now.getHours().toString().padStart(2, \\\"0\\\")\\n\\t\\t\\t\\t+ \\\":\\\"\\n\\t\\t\\t\\t+ now.getMinutes().toString().padStart(2, \\\"0\\\")\\n\\t\\t\\t\\t+ \\\":\\\"\\n\\t\\t\\t\\t+ now.getSeconds().toString().padStart(2, \\\"0\\\")\\n\\t\\t\\t\\t+ \\\".\\\"\\n\\t\\t\\t\\t+ (now.getTime() % 1000).toString().padStart(3, \\\"0\\\");\\n\\n\\t\\t\\t$tw.perf.storeRefresh({\\n\\t\\t\\t\\ttime: time,\\n\\t\\t\\t\\ttempTiddlers: tempTiddlers,\\n\\t\\t\\t\\tstateTiddlers: stateTiddlers,\\n\\t\\t\\t\\tsystemTiddlers: systemTiddlers,\\n\\t\\t\\t\\tmainTiddlers: mainTiddlers,\\n\\t\\t\\t\\ttotalTiddlers: totalTiddlers,\\n\\t\\t\\t\\tchangedTiddlerNames: Object.keys(changes),\\n\\t\\t\\t\\trefreshTimes: refreshTimes\\n\\t\\t\\t});\\n\\n\\t\\t\\tdocument.querySelector('#ec_ap-last-refresh').innerText = time;\\n\\t\\t\\tdocument.querySelector('#ec_ap-total-time').innerText = totalTime.toFixed(2) + \\\"ms\\\";\\n\\t\\t\\tdocument.querySelector('#ec_ap-times').innerHTML = '(' + refreshHtmls.join(\\\" | \\\") + ')';\\n\\t\\t\\tdocument.querySelector('#ec_ap-tiddlers').innerHTML = totalTiddlers;\\n\\t\\t\\tdocument.querySelector('#ec_ap-tiddlers-temp').innerHTML = \\\"Temp=\\\" + tempTiddlers;\\n\\t\\t\\tdocument.querySelector('#ec_ap-tiddlers-state').innerHTML = \\\"State=\\\" + stateTiddlers;\\n\\t\\t\\tdocument.querySelector('#ec_ap-tiddlers-system').innerHTML = \\\"System=\\\" + systemTiddlers;\\n\\t\\t\\tdocument.querySelector('#ec_ap-tiddlers-main').innerHTML = \\\"Main=\\\" + mainTiddlers;\\n\\n\\t\\t\\t// Clear current refresh times to avoid outdated `mainRender` polluting our logs\\n\\t\\t\\t$tw.perf.refreshTimes = {};\\n\\n\\t\\t\\tvar showDetailsButton = document.querySelector('#ec_ap-show-details');\\n\\t\\t\\tshowDetailsButton.removeEventListener('click', onShowDetailsClicked);\\n\\t\\t\\tshowDetailsButton.addEventListener('click', onShowDetailsClicked);\\n\\n\\t\\t\\tvar tabsContainer = document.querySelector('#ec_ap-tab-headers');\\n\\t\\t\\ttabsContainer.removeEventListener('click', onTabClicked, true);\\n\\t\\t\\ttabsContainer.addEventListener('click', onTabClicked, true);\\n\\n\\t\\t\\tvar closeButton = document.querySelector('#ec_ap-close');\\n\\t\\t\\tcloseButton.removeEventListener('click', onCloseClicked, true);\\n\\t\\t\\tcloseButton.addEventListener('click', onCloseClicked, true);\\n\\n\\t\\t\\tvar clearPerfDataButton = document.querySelector('#ec_ap-clear');\\n\\t\\t\\tclearPerfDataButton.removeEventListener('click', onClearPerfDataClicked, true);\\n\\t\\t\\tclearPerfDataButton.addEventListener('click', onClearPerfDataClicked, true);\\n\\t\\t});\\n\\t};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/EvidentlyCube/AdvancedPerformance/ui\":{\"title\":\"$:/plugins/EvidentlyCube/AdvancedPerformance/ui\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"<$list filter=\\\"[[$:/config/Performance/Instrumentation]get[text]match[yes]]\\\">\\n<style>\\n#ec_ap-footer {\\n    position: fixed;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: white;\\n    padding: 4px;\\n    border-top: 1px solid #888;\\n    height: 24px;\\n    line-height: 16px;\\n    box-sizing: border-box;\\n\\tdisplay: flex;\\n\\tjustify-content: space-around;\\n}\\n.ec_ap-muted {\\n    font-style: italic;\\n    color: #888;\\n}\\n.tc-drafts-list {\\n    bottom: 24px;\\n}\\n#ec_ap-wrap {\\n\\tdisplay: none;\\n\\tbackground: rgba(200, 200, 200, 0.75);\\n\\tposition: fixed;\\n\\tleft: 0;\\n\\tright: 0;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tbox-sizing: border-box;\\n\\tpadding: 2em;\\n}\\n#ec_ap-container {\\n\\twidth: 100%;\\n    height: 100%;\\n    margin: auto;\\n    background: #EEE;\\n    max-width: 1024px;\\n    box-sizing: border-box;\\n    border-radius: 2em;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n}\\n#ec_ap-container > h1 {\\n\\tpadding: 1em;\\n\\tmargin: 0;\\n\\tdisplay: flex;\\n\\twidth: 100%;\\n\\tgap: 1em;\\n}\\n#ec_ap-container > h1 span:first-child {\\n\\tflex-grow: 1;\\n}\\n\\n#ec_ap-tab-headers {\\n\\tdisplay: flex;\\n\\tflex-wrap: wrap;\\n\\tmargin: auto;\\n\\twidth: 100%;\\n}\\n#ec_ap-tab-headers > div{\\n\\tflex: 1 0 auto;\\n\\ttext-align: center;\\n\\tfont-size: 20px;\\n\\tbackground: #EEE;\\n\\tline-height: 30px;\\n\\tvertical-align: middle;\\n\\twhite-space: nowrap;\\n\\tpadding: 0 2em;\\n\\tcursor: pointer;\\n}\\n#ec_ap-tab-headers > div.selected {\\n\\tbackground: #FFF;\\n}\\n#ec_ap-tabs {\\n\\tbackground: #FFF;\\n\\tflex-grow: 1;\\n\\tpadding: 1em;\\n\\toverflow-y: scroll;\\n}\\n#ec_ap-tabs td {\\n\\tpadding: 2px 7px;\\n}\\n#ec_ap-tabs td:first-child {\\n\\tfont-family: monospace;\\n\\tword-break: break-all;\\n}\\n#ec_ap-tabs td:not(:first-child) {\\n\\ttext-align: right;\\n}\\n.ec_ap-annotated {\\n\\tborder-bottom: 1px dotted #888;\\n}\\n#ec_ap-tabs > *:not(.selected) {\\n\\tdisplay: none;\\n}\\n.ec_ap-header-button {\\n\\tfloat: right;\\n    color: blue;\\n    font-variant: small-caps;\\n    font-size: 0.75em;\\n    cursor: pointer;\\n    text-decoration: underline;\\n}\\n</style>\\n<div id=\\\"ec_ap-footer\\\">\\n\\t<div id=\\\"ec_ap-message\\\" style=\\\"display: none\\\"></div>\\n\\t<div>\\n\\t\\t<strong>Last refresh:</strong> <span id=\\\"ec_ap-last-refresh\\\"></span>\\n\\t</div>\\n\\t<div>\\n\\t\\t<strong>Time taken:</strong> <span id=\\\"ec_ap-total-time\\\"></span> <span id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\"></span>\\n\\t</div>\\n\\t<div>\\n\\t\\t<strong>Tiddlers refreshed:</strong> <span id=\\\"ec_ap-tiddlers\\\"></span> <span class=\\\"ec_ap-muted\\\">(\\n\\t\\t\\t<span id=\\\"ec_ap-tiddlers-temp\\\"></span>,\\n\\t\\t\\t<span id=\\\"ec_ap-tiddlers-state\\\"></span>,\\n\\t\\t\\t<span id=\\\"ec_ap-tiddlers-system\\\"></span>,\\n\\t\\t\\t<span id=\\\"ec_ap-tiddlers-main\\\"></span>\\n\\t\\t)</span>\\n\\t</div>\\n\\t<a id=\\\"ec_ap-show-details\\\" href=\\\"#\\\">Show details</a>\\n</div>\\n<div id=\\\"ec_ap-wrap\\\">\\n<div id=\\\"ec_ap-container\\\">\\n\\t<h1>\\n\\t\\t<span>Performance reports:</span>\\n\\t\\t<span id=\\\"ec_ap-clear\\\" class=\\\"ec_ap-header-button\\\" title=\\\"Clicking this will clear all performance data collected so far releasing memory and emptying the results\\\">clear data</span>\\n\\t\\t<span id=\\\"ec_ap-close\\\" class=\\\"ec_ap-header-button\\\">close</span>\\n\\t</h1>\\n\\t<div id=\\\"ec_ap-tab-headers\\\">\\n\\t\\t<div class=\\\"ec_ap-tab-header selected\\\" data-for=\\\"ec_ap-tab--refresh-logs\\\">Refresh logs</div>\\n\\t\\t<div class=\\\"ec_ap-tab-header\\\" data-for=\\\"ec_ap-tab--most-used\\\">Most used filters</div>\\n\\t\\t<div class=\\\"ec_ap-tab-header\\\" data-for=\\\"ec_ap-tab--single-longest\\\">Single longest (filter)</div>\\n\\t\\t<div class=\\\"ec_ap-tab-header\\\" data-for=\\\"ec_ap-tab--total-longest\\\">Total longest (filter)</div>\\n\\t\\t<div class=\\\"ec_ap-tab-header\\\" data-for=\\\"ec_ap-tab--average\\\">Average (filters)</div>\\n\\t\\t<div class=\\\"ec_ap-tab-header\\\" data-for=\\\"ec_ap-tab--median\\\">Median (filters)</div>\\n\\t</div>\\n\\t<div id=\\\"ec_ap-tabs\\\">\\n\\t\\t<div class=\\\"ec_ap-tab--refresh-logs selected\\\">\\n\\t\\t\\t<h2>Latest page refreshes</h2>\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tThis displays the times and lists of tiddlers of the last 50 refreshes that TiddlyWiki has processed.<br>\\n\\t\\t\\t\\tA refresh usually occurs when a tiddler state is changed and something on the page has to be updated because of that.<br>\\n\\t\\t\\t\\t<br>\\n\\t\\t\\t\\tLong refresh times may indicate among others: large lists that need to be completely rebuilt; too many and complicated\\n\\t\\t\\t\\tstructure of your tiddlers (or too many tiddlers open at once).\\n\\t\\t\\t</p>\\n\\t\\t\\t<table id=\\\"ec_ap--last-refreshes\\\"></table>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"ec_ap-tab--most-used\\\">\\n\\t\\t\\t<h2>Most used filters</h2>\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tDisplays filter information sorted by which filter was used the largest number of times. This is unlikely to be\\n\\t\\t\\t\\tvery helpful in locating places to improve but might be interesting to look at.\\n\\t\\t\\t\\tMouse over <em>Total time (last 10)</em> to see how many ms the last 10 executions of this filter took.\\n\\t\\t\\t</p>\\n\\n\\t\\t\\t<hr>\\n\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tMouse over <em>Total time (last 10)</em> to see how many ms the last 10 executions of this filter took.\\n\\t\\t\\t</p>\\n\\t\\t\\t<table id=\\\"ec_ap--most-used\\\"></table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"ec_ap-tab--single-longest\\\">\\n\\t\\t\\t<h2>Single longest execution</h2>\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tDisplays filter information sorted by which filter took the most time in a single execution. This can\\n\\t\\t\\t\\thelp you locate the filters that take the most time on a single execution. Keep in mind:\\n\\t\\t\\t</p>\\n\\t\\t\\t<ul id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\tA filter that runs for a long time once can still take less time than a short filter that runs\\n\\t\\t\\t\\t\\tmultiple times.\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\tCertain filters (notably ''backlinks'') can take a lot of time the first time they run, after which\\n\\t\\t\\t\\t\\tthey are very quick. Keep an eye on median, average and inspect the last 10 executions to get a better\\n\\t\\t\\t\\t\\tpicture.\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\n\\t\\t\\t<hr>\\n\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tMouse over <em>Total time (last 10)</em> to see how many ms the last 10 executions of this filter took.\\n\\t\\t\\t</p>\\n\\t\\t\\t<table id=\\\"ec_ap--single-longest\\\"></table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"ec_ap-tab--total-longest\\\">\\n\\t\\t\\t<h2>Total longest execution</h2>\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tDisplays filter information sorted by which filter took the total most time in all executions. This can\\n\\t\\t\\t\\thelp you locate the filters that are short but run so many times they are a problem. Keep in mind:\\n\\t\\t\\t</p>\\n\\t\\t\\t<ul id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\tCertain filters (notably ''backlinks'') can take a lot of time the first time they run, after which\\n\\t\\t\\t\\t\\tthey are very quick. Keep an eye on median, average and inspect the last 10 executions to get a better\\n\\t\\t\\t\\t\\tpicture.\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\n\\t\\t\\t<hr>\\n\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tMouse over <em>Total time (last 10)</em> to see how many ms the last 10 executions of this filter took.\\n\\t\\t\\t</p>\\n\\t\\t\\t<table id=\\\"ec_ap--total-longest\\\"></table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"ec_ap-tab--average\\\">\\n\\t\\t\\t<h2>Longest average execution</h2>\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tDisplays filter information sorted by how much time a filter takes on average. Keep in mind:\\n\\t\\t\\t</p>\\n\\t\\t\\t<ul id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\tCertain filters (notably ''backlinks'') can take a lot of time the first time they run, after which\\n\\t\\t\\t\\t\\tthey are very quick, increasing the average. Keep an eye on median and inspect the last 10\\n\\t\\t\\t\\t\\texecutions to get a better picture.\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\n\\t\\t\\t<hr>\\n\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tMouse over <em>Total time (last 10)</em> to see how many ms the last 10 executions of this filter took.\\n\\t\\t\\t</p>\\n\\t\\t\\t<table id=\\\"ec_ap--average\\\"></table>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"ec_ap-tab--median\\\">\\n\\t\\t\\t<h2>Longest median execution</h2>\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tDisplays filter information sorted by median of all execution times. This can be helpful in filtering out\\n\\t\\t\\t\\toutliers that take a lot of time the first time they run (like ''backlinks'').\\n\\t\\t\\t</p>\\n\\n\\t\\t\\t<hr>\\n\\n\\t\\t\\t<p id=\\\"ec_ap-times\\\" class=\\\"ec_ap-muted\\\">\\n\\t\\t\\t\\tMouse over <em>Total time (last 10)</em> to see how many ms the last 10 executions of this filter took.\\n\\t\\t\\t</p>\\n\\t\\t\\t<table id=\\\"ec_ap--median\\\"></table>\\n\\t\\t</div>\\n\\t</div>\\n</div>\\n</div>\\n</$list>\"}}}"},"cache":{}}