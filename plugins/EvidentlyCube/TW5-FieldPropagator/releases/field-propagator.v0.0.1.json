{"fields":{"title":"$:/plugins/EvidentlyCube/FieldPropagator","name":"Field Propagator","version":"0.0.1","core-version":">=5.2.0","description":"Propagates a field value upwards through parent tiddlers","author":"Maurycy Zarzycki","source":"https://github.com/EvidentlyCube/TW5-FieldPropagator","plugin-type":"plugin","list":["readme","license","history"],"dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/EvidentlyCube/FieldPropagator/history\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/history\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* ''0.0.1'' -- First version of the plugin\"},\"$:/plugins/EvidentlyCube/FieldPropagator/icon\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/icon\",\"text\":\"iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEDklEQVRYhc2Yz0sjZxjHP/NOfrShu4oaJCYKC3oYRVbQi/gfxFpQ0EPYw7oXTyLeBD315CJCqQdZKAgiuQhKbYrosRg81Kr4a0PoKjUogiKhddUkzrx7iBm6OuqssdYvzOV9Z97nM+/7fZ/3mVGklJInIvF/A/xbTwrGcbVBSsnu7i66riOEwOfz4Xa7Hx9GSklnZyfvt6Z5/kySSiloNW28ezf2+DC7u7u835pm8be/EQIyGXj1egJd/wlVVZFScnJykldAIQQejwdFUW6Hubi44Pkzibh0ksMBqnqBYRioqkosFqOnp4d8NmAgEGBoaIiSkpLbYVRVJZVSyGSyIBcXYBiq+RaapjE/P39vkLv0GYzP50OraePV64nLGVHxlrbhcFzz+X8ixSrp6bqOYRgoioLD4SCdThOJRIjFYgBUVFTQ0dGBy+V6UBjLPKOqKk6n05yRSCTC2NgYyWSSZDLJ1NQUg4ODDwoCFnnGSrFYDE3TqKurA8Dr9bKysgKAYRgsLy+zt7dn3l9fX08gEODw8JDFxUXT8NXV1VRVVeUHY6VcgFyS3N7eNvvKy8sJBAIcHR0Rj8fN9sLCwvxhKioqWFpawuv1ArC6ukogEACyS9rW1mb5nKZpaJpmJwRwg4Gv6vz8nN7eXpaXl5FSUllZyejoKAUFBbYD2ZGtg/LDhz8x9N9paT7ku28P+fqrDRYWFh4UBABpQ2/ffi9/mUbKVPZa+wMZCoXM/vPzc3l6enrrZUe2PCOlYR4RAKqa3UWQPUImJyfNHGQlt9tNf38/Qty+ELZgFEVwGRsAXccc2OFw0N7ebsLdpLtAbMM0N7fy4w8/s7p2DMDOzjeEQiGz/6HqHVu7SUrJwcEBp6enZvCysjJmZ2cJh8MYhoEQglAoRDAYtCwPbMmWsyyUSCRk7ZuXkjWXZNMtWXPJ2jcvZSKRuO+Q9gxspVQqxT8vPkJtzgsKJy8+kkqlAFhfX2dubs7y2cbGRpqamq6151Ub3LYYRUVFN6b+0tJSy/Z7w3g8HooShexE/sqmTgOKEoV4PB4A/H4/fr//i8a0ZWDImljXdSB7HgFsbm0y/es0hjQQiqC1uZWa6pp7G9gWzMbGBt3d3aTTaRNsYGCAYDB4r6B5wQwNDbG/v09DQwMAOzs7xONxxsfHgWw2zlWGueSWm8WcVFU1E2NuZq/KlmcymQxOp9OcfrfbTSaTASCdTtPX10c0GkUIwcjICOFwmGg0+tkYXV1dzMzM4HQ6GR0dvfvr4Ca5XC5ziQDOzs7M+tflcjE8PGwWW0II6uvrr33OCCHo7OwEuNFTtpYpkUjQ0tJiDpJMJpmYmLDMFfnI9m46Pj4mmUwCUFBQQHFx8YOCfBHMY+hJ/RJ5UjCfAAeYjFkqhdXiAAAAAElFTkSuQmCC\",\"type\":\"image/png\"},\"$:/plugins/EvidentlyCube/FieldPropagator/license\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/license\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This plugin is licensed under the MIT license.\\n\\nCopyright 2021 Maurycy Zarzycki\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"},\"$:/plugins/EvidentlyCube/FieldPropagator/readme\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Github|https://github.com/EvidentlyCube/TW5-FieldPropagator]]\\n\\n----\\n\\nPropagates a value of children's field up through its parents. Primary use case was to allow marking tiddlers as public/private, and have the option to display in Table of Contents if a given parent tiddler has any public children.\"},\"$:/plugins/EvidentlyCube/FieldPropagator/index.js\":{\"title\":\"$:/plugins/EvidentlyCube/FieldPropagator/index.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/FieldPropagator/index.js\\ntype: application/javascript\\nmodule-type: indexer\\n\\n\\\\*/\\n\\n(function () {\\n\\n\\t/*jslint node: true, browser: true */\\n\\t/*global modules: false */\\n\\t\\\"use strict\\\";\\n\\n\\tvar isRebuilding = false;\\n\\n\\tfunction PropagatorIndexer(wiki) {\\n\\t\\tthis.wiki = wiki;\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.init = function () {\\n\\t\\tthis.index = null;\\n\\n\\t\\tthis.childrenMap = new Map();\\n\\t\\tthis.parents = null;\\n\\t\\tthis.trackedFields = null;\\n\\t\\tthis.queuedToRebuild = [];\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.rebuild = function () {\\n\\t\\tvar self = this;\\n\\t\\tthis.parents = $tw.wiki.getTiddlersWithTag(\\\"$:/tags/Propagator\\\");\\n\\t\\tthis.trackedFields = [];\\n\\t\\tthis.childrenMap.clear();\\n\\n\\t\\t$tw.wiki.forEachTiddler(function (title, tiddler) {\\n\\t\\t\\tif (tiddler.isDraft()) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar parent = tiddler.fields.parent;\\n\\t\\t\\tif (parent) {\\n\\t\\t\\t\\tif (!self.childrenMap.has(parent)) {\\n\\t\\t\\t\\t\\tself.childrenMap.set(parent, new Set());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tself.childrenMap.get(parent).add(tiddler.fields.title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.parents.forEach(function (title) {\\n\\t\\t\\tvar parent = $tw.wiki.getTiddler(title);\\n\\t\\t\\tvar baseField = parent.fields['propagator-base'];\\n\\n\\t\\t\\tif (baseField && self.trackedFields.indexOf(baseField) === -1) {\\n\\t\\t\\t\\tself.trackedFields.push(baseField);\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tthis.queuedToRebuild = this.parents.concat();\\n\\t\\tthis.rebuildRoots();\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.update = function (updateDescriptor) {\\n\\t\\tif (isRebuilding) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Ignore shadow tiddlers and drafts\\n\\t\\tif (updateDescriptor.old.shadow || updateDescriptor.new.shadow) {\\n\\t\\t\\treturn;\\n\\t\\t} else if (\\n\\t\\t\\t(updateDescriptor.old.tiddler && updateDescriptor.old.tiddler.isDraft())\\n\\t\\t\\t|| (updateDescriptor.new.tiddler && updateDescriptor.new.tiddler.isDraft())\\n\\t\\t) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.removeFromIndex(updateDescriptor.old.tiddler);\\n\\t\\tthis.addToIndex(updateDescriptor.new.tiddler);\\n\\n\\t\\tif (updateDescriptor.old.exists !== updateDescriptor.new.exists) {\\n\\t\\t\\tthis.queueRoot(this.findRoot(updateDescriptor.old.tiddler));\\n\\t\\t\\tthis.queueRoot(this.findRoot(updateDescriptor.new.tiddler));\\n\\t\\t} else if (updateDescriptor.old.parent !== updateDescriptor.new.parent) {\\n\\t\\t\\tthis.queueRoot(this.findRoot(updateDescriptor.old.tiddler));\\n\\t\\t\\tthis.queueRoot(this.findRoot(updateDescriptor.new.tiddler));\\n\\t\\t} else {\\n\\t\\t\\tconst isChanged = this.trackedFields.find(function (field) {\\n\\t\\t\\t\\treturn updateDescriptor.old.tiddler.fields[field] !== updateDescriptor.new.tiddler.fields[field];\\n\\t\\t\\t});\\n\\n\\t\\t\\tif (isChanged) {\\n\\t\\t\\t\\tthis.queueRoot(this.findRoot(updateDescriptor.new.tiddler));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.removeFromIndex = function (tiddler) {\\n\\t\\tif (!tiddler || !tiddler.fields.parent) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar index = this.childrenMap.get(tiddler.fields.parent);\\n\\t\\tif (index) {\\n\\t\\t\\tindex.delete(tiddler.fields.title);\\n\\t\\t}\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.addToIndex = function (tiddler) {\\n\\t\\tif (!tiddler || !tiddler.fields.parent) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar index = this.childrenMap.get(tiddler.fields.parent);\\n\\t\\tif (!index) {\\n\\t\\t\\tindex = new Set();\\n\\t\\t\\tthis.childrenMap.set(tiddler.fields.parent, index);\\n\\t\\t}\\n\\t\\tindex.add(tiddler.fields.title);\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.queueRoot = function (root) {\\n\\t\\tif (root && this.queuedToRebuild.indexOf(root.fields.title) === -1) {\\n\\t\\t\\tif (this.queuedToRebuild.length === 0) {\\n\\t\\t\\t\\tsetTimeout(this.rebuildRoots.bind(this), 1);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.queuedToRebuild.push(root.fields.title);\\n\\t\\t}\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.rebuildRoots = function () {\\n\\t\\tvar self = this;\\n\\t\\tisRebuilding = true;\\n\\n\\t\\ttry {\\n\\t\\t\\tthis.queuedToRebuild.forEach(function (root) {\\n\\t\\t\\t\\tself.rebuildRoot($tw.wiki.getTiddler(root));\\n\\t\\t\\t});\\n\\t\\t} finally {\\n\\t\\t\\tisRebuilding = false;\\n\\t\\t\\tthis.queuedToRebuild.length = 0;\\n\\t\\t}\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.rebuildRoot = function (root) {\\n\\t\\tconst baseField = root.fields[\\\"propagator-base\\\"];\\n\\t\\tconst propagatedField = root.fields[\\\"propagator-propagated\\\"];\\n\\t\\tconst preferredValue = root.fields[\\\"propagator-preferred-value\\\"];\\n\\t\\tconst saveQueue = new Map();\\n\\n\\t\\tif (baseField === 'title' || propagatedField === 'title') {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar index = this.childrenMap.get(root.fields.title);\\n\\t\\tif (index) {\\n\\t\\t\\tArray.from(index.values()).forEach(childTitle => this.updateChild($tw.wiki.getTiddler(childTitle), baseField, propagatedField, preferredValue, saveQueue));\\n\\t\\t}\\n\\n\\t\\tArray.from(saveQueue.values()).forEach(tiddler => {\\n\\t\\t\\t$tw.wiki.addTiddler(tiddler);\\n\\t\\t})\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.updateChild = function (tiddler, baseField, propagatedField, preferredValue, saveQueue) {\\n\\t\\tlet targetValue = undefined;\\n\\n\\t\\tvar index = this.childrenMap.get(tiddler.fields.title);\\n\\t\\tif (index) {\\n\\t\\t\\tArray.from(index.values()).forEach(childTitle => {\\n\\t\\t\\t\\tlet result = this.updateChild($tw.wiki.getTiddler(childTitle), baseField, propagatedField, preferredValue, saveQueue);\\n\\n\\t\\t\\t\\tif (targetValue === undefined) {\\n\\t\\t\\t\\t\\ttargetValue = result;\\n\\t\\t\\t\\t} else if (result === preferredValue) {\\n\\t\\t\\t\\t\\ttargetValue = result;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Update this tiddler's propagated field based on children's value\\n\\t\\tif (targetValue !== tiddler.fields[propagatedField]) {\\n\\t\\t\\tconsole.log(`Updating ${tiddler.fields.title} setting to ${targetValue}`);\\n\\t\\t\\tconst update = {};\\n\\t\\t\\tupdate[propagatedField] = targetValue;\\n\\n\\t\\t\\tconst newTiddler = new $tw.Tiddler(saveQueue.get(tiddler.fields.title) || tiddler, update);\\n\\t\\t\\tsaveQueue.set(tiddler.fields.title, newTiddler);\\n\\t\\t}\\n\\n\\t\\t// Get the current tiddler's base field's value and use it if there is no propagated value\\n\\t\\t// Or the current value is the preferred one (otherwise we'd only look at the ends of\\n\\t\\t// the tree for values, rather than whole branches\\n\\t\\tconst baseValue = tiddler.fields[baseField];\\n\\t\\tif (targetValue === undefined || baseValue === preferredValue) {\\n\\t\\t\\treturn baseValue;\\n\\t\\t}\\n\\n\\t\\treturn targetValue;\\n\\t}\\n\\n\\tPropagatorIndexer.prototype.findRoot = function (tiddler) {\\n\\t\\tif (tiddler && tiddler.isDraft()) {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\twhile (tiddler) {\\n\\t\\t\\tif (tiddler.hasTag('$:/tags/Propagator')) {\\n\\t\\t\\t\\treturn tiddler;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttiddler = $tw.wiki.getTiddler(tiddler.fields.parent);\\n\\t\\t}\\n\\n\\t\\treturn undefined;\\n\\t}\\n\\n\\texports.PropagatorIndexer = PropagatorIndexer;\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"indexer\"}}}"},"cache":{}}